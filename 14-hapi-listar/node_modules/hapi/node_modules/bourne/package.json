{
  "_args": [
    [
      "bourne@https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
      "/home/thiago/Documentos/Dev/Courses/nodejs/14-hapi-listar/node_modules/hapi"
    ]
  ],
  "_from": "bourne@https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
  "_id": "bourne@1.1.1",
  "_inCache": true,
  "_location": "/hapi/bourne",
  "_phantomChildren": {},
  "_requested": {
    "name": "bourne",
    "raw": "bourne@https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
    "rawSpec": "https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/hapi/statehood",
    "/hapi/subtext"
  ],
  "_resolved": "https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
  "_shasum": "fb222298a549723b51623512e654db116cbc547b",
  "_shrinkwrap": null,
  "_spec": "bourne@https://registry.npmjs.org/bourne/-/bourne-1.1.1.tgz",
  "_where": "/home/thiago/Documentos/Dev/Courses/nodejs/14-hapi-listar/node_modules/hapi",
  "bugs": {
    "url": "https://github.com/hapijs/bourne/issues"
  },
  "dependencies": {},
  "description": "JSON parse with prototype poisoning protection",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "code": "5.x.x",
    "lab": "18.x.x"
  },
  "homepage": "https://github.com/hapijs/bourne#readme",
  "keywords": [
    "JSON",
    "parse",
    "prototype",
    "safe"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "name": "bourne",
  "optionalDependencies": {},
  "readme": "# Bourne. JSON Bourne.\n\n`JSON.parse()` drop-in replacement with prototype poisoning protection\n\n## Introduction\n\nConsider this:\n\n```\n> const a = '{\"__proto__\":{ \"b\":5}}';\n'{\"__proto__\":{ \"b\":5}}'\n\n> const b = JSON.parse(a);\n{ __proto__: { b: 5 } }\n\n> b.b;\nundefined\n\n> const c = Object.assign({}, b);\n{}\n\n> c.b\n5\n```\n\nThe problem is that `JSON.parse()` retains the `__proto__` property as a plain object key. By\nitself, this is not a security issue. However, as soon as that object is assigned to another or\niterated on and values copied, the `__proto__` property leaks and becomes the object's prototype.\n\n## API\n\n### `Bourne.parse(text, [reviver], [options])`\n\nParses a given JSON-formatted text into an object where:\n- `text` - the JSON text string.\n- `reviver` - the `JSON.parse()` optional `reviver` argument.\n- `options` - optional configuration object where:\n    - `protoAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\n        - `'remove'` - deletes any `__proto__` keys from the result object.\n        - `'ignore'` - skips all validation (same as calling `JSON.parse()` directly).\n\n### `Bourne.scan(obj, [options])`\n\nScans a given object for prototype properties where:\n- `obj` - the object being scanned.\n- `options` - optional configuration object where:\n    - `protoAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\n        - `'remove'` - deletes any `__proto__` keys from the input `obj`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/bourne.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "version": "1.1.1"
}
